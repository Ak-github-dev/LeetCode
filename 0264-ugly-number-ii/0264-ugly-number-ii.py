"""
Key Concept:
Ugly numbers are numbers that can be generated by multiplying 2, 3, or 5 by another ugly number.
The sequence starts with 1 as the first ugly number. Subsequent ugly numbers are obtained by multiplying the previous ugly numbers by 2, 3, or 5 and choosing the smallest new number that hasnâ€™t been used before.
Approach:
Dynamic Programming Array:

Create an array ugly where ugly[i] will store the i+1th ugly number.
Start with ugly[0] = 1.
Use Three Pointers:

Maintain three pointers p2, p3, and p5 which will help generate the next multiples of 2, 3, and 5 respectively.
The next potential ugly number will be the minimum of ugly[p2] * 2, ugly[p3] * 3, and ugly[p5] * 5.
Update Pointers:

After choosing the minimum value, increment the corresponding pointer(s) to move forward for the next round.
Continue Until the nth Ugly Number is Found:

Continue generating ugly numbers until the nth number is added to the ugly array.
"""
class Solution(object):
    def nthUglyNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        ugly = [0] * n
        ugly[0] = 1
        
        p2, p3, p5 = 0, 0, 0
        
        for i in range(1, n):
            next_ugly = min(ugly[p2] * 2, ugly[p3] * 3, ugly[p5] * 5)
            ugly[i] = next_ugly
            
            if next_ugly == ugly[p2] * 2:
                p2 += 1
            if next_ugly == ugly[p3] * 3:
                p3 += 1
            if next_ugly == ugly[p5] * 5:
                p5 += 1
        
        return ugly[-1]